apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: "androidx.navigation.safeargs.kotlin"

apply plugin: 'kotlin-kapt'

android {
  compileSdkVersion 28
  defaultConfig {
    applicationId "com.cjw.demo1"
    minSdkVersion 24
    targetSdkVersion 28
    versionCode 1
    versionName "1.0"
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }
}

dependencies {
  implementation fileTree(include: ['*.jar'], dir: 'libs')
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
  implementation 'androidx.appcompat:appcompat:1.1.0-alpha04'
  implementation 'androidx.core:core-ktx:1.1.0-alpha05'
  implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
  testImplementation 'junit:junit:4.12'
  androidTestImplementation 'androidx.test:runner:1.2.0-alpha03'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0-alpha03'

  // logger
  implementation 'com.orhanobut:logger:2.2.0'

  // rxkotlin
  implementation 'io.reactivex.rxjava2:rxkotlin:2.3.0'

  // rxAndroid
  implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

  // gson
  implementation 'com.google.code.gson:gson:2.8.5'

  // rxpermission2
  implementation 'com.github.tbruyelle:rxpermissions:0.10.2'

  // stetho
  implementation 'com.facebook.stetho:stetho:1.5.1'
  implementation 'com.facebook.stetho:stetho-okhttp3:1.5.1'

  // retrofit
  def retrofit_version = "2.5.0"
  implementation "com.squareup.retrofit2:retrofit:${retrofit_version}"
  implementation "com.squareup.retrofit2:adapter-rxjava2:${retrofit_version}"
  implementation "com.squareup.retrofit2:converter-gson:${retrofit_version}"

  // adapter
  implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.45-androidx'

  def lifecycle_version = "2.0.0"
  // ViewModel and LiveData
  implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
  // alternatively - just ViewModel
  // implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version" // For Kotlin use lifecycle-viewmodel-ktx
  implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
  // alternatively - just LiveData
  implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
  // alternatively - Lifecycles only (no ViewModel or LiveData). Some UI AndroidX libraries use this lightweight import for Lifecycle
  implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
  kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"

  // For Kotlin use kapt instead of annotationProcessor
  // alternately - if using Java8, use the following instead of lifecycle-compiler
  kapt "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

  // optional - ReactiveStreams support for LiveData
  // implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version" // For Kotlin use lifecycle-reactivestreams-ktx
  implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"

  // optional - Test helpers for LiveData
  testImplementation "androidx.arch.core:core-testing:$lifecycle_version"

  // LiveData
  // implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
  // implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

  // navigation
  // implementation "androidx.navigation:navigation-fragment:$nav_version" // For Kotlin use navigation-fragment-ktx
  implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"

  // implementation "androidx.navigation:navigation-ui:$nav_version" // For Kotlin use navigation-ui-ktx
  implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"

  // Room
  def room_version = "2.1.0-alpha06"
  implementation "androidx.room:room-runtime:$room_version"

  // annotationProcessor "androidx.room:room-compiler:$room_version"  // For Kotlin use kapt instead of annotationProcessor
  kapt "androidx.room:room-compiler:$room_version"
  // optional - Kotlin Extensions and Coroutines support for Room
  implementation "androidx.room:room-ktx:$room_version"
  // optional - RxJava support for Room
  implementation "androidx.room:room-rxjava2:$room_version"
  // optional - Guava support for Room, including Optional and ListenableFuture
  implementation "androidx.room:room-guava:$room_version"
  // Test helpers
  testImplementation "androidx.room:room-testing:$room_version"
}
